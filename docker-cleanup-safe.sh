#!/bin/bash

# üîí Script de nettoyage Docker s√©curis√©
# Ce script nettoie Docker SANS supprimer les volumes de donn√©es critiques
# Version: 1.0
# Auteur: Syst√®me de protection des volumes

set -e  # Arr√™ter le script en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleurs
print_step() {
    echo -e "${BLUE}üîß $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_danger() {
    echo -e "${RED}üö® $1${NC}"
}

# En-t√™te du script
echo -e "${BLUE}===========================================${NC}"
echo -e "${BLUE}üßπ NETTOYAGE DOCKER S√âCURIS√â${NC}"
echo -e "${BLUE}üîí Protection des volumes de donn√©es activ√©e${NC}"
echo -e "${BLUE}===========================================${NC}"
echo ""

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "docker-compose.yml" ]; then
    print_danger "ERREUR: docker-compose.yml non trouv√©. Vous devez √™tre dans le r√©pertoire du projet."
    exit 1
fi

# Afficher l'espace disque avant nettoyage
print_step "Espace disque avant nettoyage :"
df -h | head -2
echo ""

print_step "√âtat Docker avant nettoyage :"
docker system df
echo ""

# 1. Arr√™ter les containers
print_step "Arr√™t des containers..."
docker compose down
print_success "Containers arr√™t√©s"
echo ""

# 2. Lister les volumes prot√©g√©s AVANT le nettoyage
print_warning "Volumes de donn√©es prot√©g√©s (ne seront PAS supprim√©s) :"
docker volume ls | grep -E "(postgres-data|redis-data)" || echo "Aucun volume de donn√©es trouv√©"
echo ""

# 3. Supprimer les containers arr√™t√©s
print_step "Suppression des containers arr√™t√©s..."
CONTAINERS_REMOVED=$(docker container prune -f 2>&1 | grep "Total reclaimed space" || echo "0 B")
print_success "Containers supprim√©s : $CONTAINERS_REMOVED"
echo ""

# 4. Supprimer les images non utilis√©es
print_step "Suppression des images non utilis√©es..."
IMAGES_REMOVED=$(docker image prune -a -f 2>&1 | grep "Total reclaimed space" || echo "0 B")
print_success "Images supprim√©es : $IMAGES_REMOVED"
echo ""

# 5. Supprimer les r√©seaux non utilis√©s  
print_step "Suppression des r√©seaux non utilis√©s..."
NETWORKS_REMOVED=$(docker network prune -f 2>&1 | grep "Total reclaimed space" || echo "0 B")
print_success "R√©seaux supprim√©s : $NETWORKS_REMOVED"
echo ""

# 6. Supprimer le cache de build
print_step "Suppression du cache de build..."
BUILD_CACHE_REMOVED=$(docker builder prune -a -f 2>&1 | grep "Total reclaimed space" || echo "0 B")
print_success "Cache de build supprim√© : $BUILD_CACHE_REMOVED"
echo ""

# 7. IMPORTANT: V√©rifier que les volumes critiques sont toujours l√†
print_warning "V√âRIFICATION : Volumes de donn√©es apr√®s nettoyage :"
POSTGRES_VOLUME=$(docker volume ls | grep "postgres-data" || echo "")
REDIS_VOLUME=$(docker volume ls | grep "redis-data" || echo "")

if [ -n "$POSTGRES_VOLUME" ]; then
    print_success "‚úì Volume PostgreSQL pr√©serv√© : $POSTGRES_VOLUME"
else
    print_danger "‚úó ATTENTION : Volume PostgreSQL introuvable !"
fi

if [ -n "$REDIS_VOLUME" ]; then
    print_success "‚úì Volume Redis pr√©serv√© : $REDIS_VOLUME"
else
    print_danger "‚úó ATTENTION : Volume Redis introuvable !"
fi
echo ""

# 8. Red√©marrer les services
print_step "Red√©marrage des services..."
docker compose up -d
print_success "Services red√©marr√©s"
echo ""

# 9. Afficher l'espace lib√©r√©
print_step "√âtat final :"
docker system df
echo ""

print_step "Espace disque apr√®s nettoyage :"
df -h | head -2
echo ""

# 10. R√©sum√© final
echo -e "${GREEN}===========================================${NC}"
echo -e "${GREEN}‚úÖ NETTOYAGE TERMIN√â AVEC SUCC√àS${NC}"
echo -e "${GREEN}===========================================${NC}"
print_success "Containers supprim√©s : $CONTAINERS_REMOVED"
print_success "Images supprim√©es : $IMAGES_REMOVED" 
print_success "R√©seaux supprim√©s : $NETWORKS_REMOVED"
print_success "Cache supprim√© : $BUILD_CACHE_REMOVED"
echo ""

print_warning "VOLUMES DE DONN√âES PROT√âG√âS :"
docker volume ls | grep -E "(postgres-data|redis-data)" | while read line; do
    print_success "üîí $line"
done
echo ""

print_danger "RAPPEL S√âCURIT√â :"
echo -e "${RED}üö® Pour supprimer les volumes (DANGER - PERTE DE DONN√âES) :${NC}"
echo -e "${RED}   docker volume rm vexa-bot_postgres-data${NC}"
echo -e "${RED}   docker volume rm vexa-bot_redis-data${NC}"
echo ""

print_success "Utilisation recommand√©e : ./scripts/docker-cleanup-safe.sh"
print_success "Documentation : VOLUME_PROTECTION.md"
